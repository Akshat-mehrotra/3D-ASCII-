#include "3dcube.h"
#include <string.h>
#include <stdlib.h>

const double pi2 = 2*M_PI;
const double divisions = 120;
const double theta_increase = pi2/divisions;


int main(){
   char** canvas = create_canvas();
   t_vertexs cube3d = { {-10, -10, -10}, {-10, -9, -10}, {-10, -8, -10}, {-10, -7, -10}, {-10, -6, -10}, {-10, -5, -10}, {-10, -4, -10}, {-10, -3, -10}, {-10, -2, -10}, {-10, -1, -10}, {-10, 0, -10}, {-10, 1, -10}, {-10, 2, -10}, {-10, 3, -10}, {-10, 4, -10}, {-10, 5, -10}, {-10, 6, -10}, {-10, 7, -10}, {-10, 8, -10}, {-10, 9, -10}, {-10, 10, -10},
                   {-10, -10, 10}, {-10, -9, 10}, {-10, -8, 10}, {-10, -7, 10}, {-10, -6, 10}, {-10, -5, 10}, {-10, -4, 10}, {-10, -3, 10}, {-10, -2, 10}, {-10, -1, 10}, {-10, 0, 10}, {-10, 1, 10}, {-10, 2, 10}, {-10, 3, 10}, {-10, 4, 10}, {-10, 5, 10}, {-10, 6, 10}, {-10, 7, 10}, {-10, 8, 10}, {-10, 9, 10}, {-10, 10, 10},

                   {-10, 10, -10}, {-9, 10, -10}, {-8, 10, -10}, {-7, 10, -10}, {-6, 10, -10}, {-5, 10, -10}, {-4, 10, -10}, {-3, 10, -10}, {-2, 10, -10}, {-1, 10, -10}, {0, 10, -10}, {1, 10, -10}, {2, 10, -10}, {3, 10, -10}, {4, 10, -10}, {5, 10, -10}, {6, 10, -10}, {7, 10, -10}, {8, 10, -10}, {9, 10, -10}, {10, 10, -10},
                   {-10, 10, 10}, {-9, 10, 10}, {-8, 10, 10}, {-7, 10, 10}, {-6, 10, 10}, {-5, 10, 10}, {-4, 10, 10}, {-3, 10, 10}, {-2, 10, 10}, {-1, 10, 10}, {0, 10, 10}, {1, 10, 10}, {2, 10, 10}, {3, 10, 10}, {4, 10, 10}, {5, 10, 10}, {6, 10, 10}, {7, 10, 10}, {8, 10, 10}, {9, 10, 10}, {10, 10, 10},

                   {10, 10, -10}, {10, 9, -10}, {10, 8, -10}, {10, 7, -10}, {10, 6, -10}, {10, 5, -10}, {10, 4, -10}, {10, 3, -10}, {10, 2, -10}, {10, 1, -10}, {10, 0, -10}, {10, -1, -10}, {10, -2, -10}, {10, -3, -10}, {10, -4, -10}, {10, -5, -10}, {10, -6, -10}, {10, -7, -10}, {10, -8, -10}, {10, -9, -10}, {10, -10, -10},
                   {10, 10, 10}, {10, 9, 10}, {10, 8, 10}, {10, 7, 10}, {10, 6, 10}, {10, 5, 10}, {10, 4, 10}, {10, 3, 10}, {10, 2, 10}, {10, 1, 10}, {10, 0, 10}, {10, -1, 10}, {10, -2, 10}, {10, -3, 10}, {10, -4, 10}, {10, -5, 10}, {10, -6, 10}, {10, -7, 10}, {10, -8, 10}, {10, -9, 10}, {10, -10, 10},

                   {10, -10, -10}, {9, -10, -10}, {8, -10, -10}, {7, -10, -10}, {6, -10, -10}, {5, -10, -10}, {4, -10, -10}, {3, -10, -10}, {2, -10, -10}, {1, -10, -10}, {0, -10, -10}, {-1, -10, -10}, {-2, -10, -10}, {-3, -10, -10}, {-4, -10, -10}, {-5, -10, -10}, {-6, -10, -10}, {-7, -10, -10}, {-8, -10, -10}, {-9, -10, -10}, {-10, -10, -10},
                   {10, -10, 10}, {9, -10, 10}, {8, -10, 10}, {7, -10, 10}, {6, -10, 10}, {5, -10, 10}, {4, -10, 10}, {3, -10, 10}, {2, -10, 10}, {1, -10, 10}, {0, -10, 10}, {-1, -10, 10}, {-2, -10, 10}, {-3, -10, 10}, {-4, -10, 10}, {-5, -10, 10}, {-6, -10, 10}, {-7, -10, 10}, {-8, -10, 10}, {-9, -10, 10}, {-10, -10, 10},

                   {-10, -10, -10}, {-10, -10, -9}, {-10, -10, -8}, {-10, -10, -7}, {-10, -10, -6}, {-10, -10, -5}, {-10, -10, -4}, {-10, -10, -3}, {-10, -10, -2}, {-10, -10, -1}, {-10, -10, 0}, {-10, -10, 1}, {-10, -10, 2}, {-10, -10, 3}, {-10, -10, 4}, {-10, -10, 5}, {-10, -10, 6}, {-10, -10, 7}, {-10, -10, 8}, {-10, -10, 9}, {-10, -10, 10},
                   {-10, 10, -10}, {-10, 10, -9}, {-10, 10, -8}, {-10, 10, -7}, {-10, 10, -6}, {-10, 10, -5}, {-10, 10, -4}, {-10, 10, -3}, {-10, 10, -2}, {-10, 10, -1}, {-10, 10, 0}, {-10, 10, 1}, {-10, 10, 2}, {-10, 10, 3}, {-10, 10, 4}, {-10, 10, 5}, {-10, 10, 6}, {-10, 10, 7}, {-10, 10, 8}, {-10, 10, 9}, {-10, 10, 10},
                   {10, 10, -10}, {10, 10, -9}, {10, 10, -8}, {10, 10, -7}, {10, 10, -6}, {10, 10, -5}, {10, 10, -4}, {10, 10, -3}, {10, 10, -2}, {10, 10, -1}, {10, 10, 0}, {10, 10, 1}, {10, 10, 2}, {10, 10, 3}, {10, 10, 4}, {10, 10, 5}, {10, 10, 6}, {10, 10, 7}, {10, 10, 8}, {10, 10, 9}, {10, 10, 10},
                   {10, -10, -10}, {10, -10, -9}, {10, -10, -8}, {10, -10, -7}, {10, -10, -6}, {10, -10, -5}, {10, -10, -4}, {10, -10, -3}, {10, -10, -2}, {10, -10, -1}, {10, -10, 0}, {10, -10, 1}, {10, -10, 2}, {10, -10, 3}, {10, -10, 4}, {10, -10, 5}, {10, -10, 6}, {10, -10, 7}, {10, -10, 8}, {10, -10, 9}, {10, -10, 10},
   };
   int index, y_canvas, x_canvas;
   t_point rot_p, projected_p;
   double theta;
   
    for (double theta = 0;; theta += theta_increase) {
        reset_canvas(canvas);
        system("CLS");
        for (t_point point : cube3d) {
            rotate(point, theta);

            if(PERSPECTIVE){
                while (point.size() != 2) {
                    perpspective_projection(point);
                }
            }
            x_canvas = (int)round( res/2 + point[0] );
            y_canvas = (int)round( res/2 - point[1] );
           
            if (y_canvas < res && x_canvas < res && y_canvas >= 0 && x_canvas >= 0){
                  canvas[y_canvas][x_canvas] = '*';
            }
                      
        }
        print_canvas(canvas);
    }
   
}
